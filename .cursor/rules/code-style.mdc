---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---

# Code Style and Patterns

- Follow TypeScript best practices to ensure type safety and developer confidence.
- Use clear, descriptive names for variables and functions. Avoid abbreviations.
  
## Naming Conventions

- **PascalCase** for components and exported functions  
  Example: `export const UserCard = () => {}`
- **camelCase** for variables, functions, and methods
- **UPPER_SNAKE_CASE** for constants

## Component Structure

- Each component should have one clear responsibility.
- Separate unrelated UI concernsâ€”for example, navigation elements should not handle data mutation.
- Avoid mixing functionality. Never place action buttons inside components meant solely for layout (e.g., `Breadcrumbs`).

## Code Organization

- Group related constants, utilities, and logic together for clarity.
- Place all hooks at the top of component bodies.
- Keep logic focused; extract complex behavior into custom hooks to keep components lean.

## Formatting and Readability

- Maintain consistent formatting using a linter and formatter (e.g., ESLint + Prettier).
- Optimize for readability. Future developers should understand your code without explanation.
- Throw errors only when necessary. All error messages should end with a period.

## API and Data

- Use [TanStack Query](mdc:https:/tanstack.com/query/latest) for all server interactions. Handle loading, error, and success states explicitly.

