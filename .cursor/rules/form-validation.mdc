---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

# Form Validation Rules

Defines how forms should be structured, validated, and displayed in the frontend.

## Libraries

- Use [`react-hook-form`](mdc:https:/react-hook-form.com) to manage form state.
- Use [`zod`](mdc:https:/zod.dev) for schema-based validation.
- Combine both using `@hookform/resolvers/zod`.

## Validation Rules

- Always define a validation schema for every form.
- Store schemas in `src/validations/` or `src/forms/schemas/`—never inline.
- Avoid writing validation rules directly inside JSX.
- Show validation errors next to their respective fields.
- Use the `FormErrorMessage` component to display errors consistently.
- Required fields must be clearly marked (e.g., with an asterisk or helper text).
- Apply both `isRequired` and `aria-required` to required fields.
- Ensure schema keys match the `name` prop on form components exactly.
- Validate on submit by default. Use `onBlur` or `onChange` only when justified by UX.

## Form Guidelines

- Use controlled components connected to `react-hook-form`.
- For large or reusable forms, group logic into a custom `useFormXyz` hook.
- Validate both happy paths and error cases in tests.
- Never suppress or auto-dismiss errors unless intentionally designed.
- Use semantic input types whenever possible (e.g., `type="email"`).

## Example – Basic Form with Validation

```tsx
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { TextField } from "src/components/ui/TextField";
import { Button } from "src/components/ui/Button";
import { FormErrorMessage } from "src/ui/components/FormErrorMessage";

const schema = z.object({
  email: z.string().email(),
  password: z.string().min(6),
});

export function LoginForm() {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(schema),
  });

  const onSubmit = (data: any) => {
    // handle login logic
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <TextField label="Email" {...register("email")} isRequired />
      <FormErrorMessage error={errors.email?.message} />

      <TextField label="Password" type="password" {...register("password")} isRequired />
      <FormErrorMessage error={errors.password?.message} />

      <Button type="submit">Login</Button>
    </form>
  );
}
