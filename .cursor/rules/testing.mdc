---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---

# Testing

Defines expectations for writing and maintaining tests across the codebase.

## Integration Tests

- Write integration tests where features involve multiple components working together.
- Prioritize user flows and interaction coverage over implementation details.
- Ensure important component boundaries and behavior are tested.
- Maintain meaningful test coverage without over-testing edge cases.

## Unit Testing

_(Rule Type: Always)_

- All UI components **must** have corresponding unit tests.
- Use **Vitest** as the test runner.
- Use **React Testing Library** for rendering and interaction logic.

### What to Test

- Rendering: confirm that components render expected elements.
- Accessibility: check for semantic roles, labels, and ARIA attributes.
- Interactions: simulate realistic user behavior (e.g., clicking, typing).
- Use `describe`, `it`, `expect`, and `screen` from `@testing-library/react`.

> ⚠️ A component is not considered complete without a unit test.

## Example – Basic Unit Test

```tsx
// Checkbox.test.tsx
import { render, screen } from "@testing-library/react";
import { describe, it, expect } from "vitest";
import { Checkbox } from "./Checkbox";

describe("Checkbox", () => {
  it("renders with a label", () => {
    render(<Checkbox label="Accept Terms" />);
    expect(screen.getByLabelText("Accept Terms")).toBeInTheDocument();
  });
});
